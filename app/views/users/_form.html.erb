<%= form_for(@user) do |f| %>
  <% if @user.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@user.errors.count, 'error') %> prohibited this user from being saved:</h2>

      <ul>
      <% @user.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <div class = "panel panel-primary">
 <div class = "panel-heading">
     <h3>&nbsp;New User Information</h3> 
    </div>
    <div class = "panel-body">
  <div id="full_name">
    <%= f.label :first_name, 'First Name' %>
    <%= f.text_field :first_name %>
    <%= f.label :last_name, 'Last Name' %>
    <%= f.text_field :last_name %>
  </div>
  <div id="school_info">
    <%= f.label :school_id, 'School ID' %>
    <%= f.text_field :school_id %>
    <%= f.label :email, 'E-mail Address' %>
    <%= f.text_field :email %>
  </div>
  <div id="phone_box_num">
    <%= f.label :phone, 'PCC Phone' %>
    <%= f.text_field :phone %>
    <%= f.label :box, 'PCC Box Number' %>
    <%= f.text_field :box %>
  </div>
  	<%= f.hidden_field :role, :value => 1 %>
  <div id="major_minor">
    <%= f.label :major, 'Major' %>
    <%= f.text_field :major %>
    <%= f.label :minor, 'Minor' %>
    <%= f.text_field :minor %>
  </div>
  <div id="class">
  	<%= f.label :classification, 'Classification' %>
  	<%= f.select :classification, [['Freshman', 'Freshman'], ['Sophmore', 'Sophmore'], ['Junior', 'Junior'], ['Senior', 'Senior']] %>
  </div>
  <br />
  <div class="actions">
    <%= f.submit  :class => 'btn btn-large btn-primary btn-sm'%>
  </div>
</div>
</div>
<% end %>

<!-- This adds client-side validation -->
<script>
	$(document).ready(function () {
		
		// Custom method to make sure only letters are entered
		jQuery.validator.addMethod("letters_only", function(value, element) {
			return this.optional(element) || /^[-a-zA-Z\s ?()'\/&-\.]+$/i.test(value);
		});
		
		// Custom method to make sure only letters and numbers are entered (no symbols or punctuation)
		jQuery.validator.addMethod("id_valid", function(value, element) {
        	return this.optional(element) || /^[0-9]+$/i.test(value);
    	});
    	
    	// Custom method to make sure the user does not put in all zeros
		jQuery.validator.addMethod("min_digit", function (value, el, param) {
    		return value > param;
		});

    	jQuery.validator.addMethod("email_valid", function(value, element) {
        	return this.optional(element) || /^([^@\s]+)@(students.pcci.edu)$/i.test(value);
    	});
    	
    	// Custom method to make sure the telephone is valid
		jQuery.validator.addMethod("valid_telephone", function(value, element) {
			return this.optional(element) || /^(([tT][oO][wW][nN])|(((17)\s*[-]\s*)?(\d{4})\s*[-]\s*([1-4]{1}))*|((([1-9][0-9][0-9])?\s*[-]\s*)?([1-9][0-9][0-9])\s*[-]\s*(\d{4})\s*(([eE][xX][tT])\.?\s*(\d{1,4}))*))$/.test(value);
		});
		
		$("#new_user").validate({
			rules: {
				"user[first_name]": {required: true, letters_only: true},
				"user[last_name]": {required: true, letters_only: true},
				"user[school_id]": {required: true, id_valid: true, rangelength: [6,6], min_digit: 1},
				"user[email]": {required: true, email: true, email_valid: true},
				"user[phone]": {required: true, valid_telephone: true},
				"user[box]": {required: true, digits: true, rangelength: [3,4], min_digit: 1}
			},
			messages: {
				"user[first_name]": "Please enter the student's first name.",
				"user[last_name]": "Please enter the student's last name.",
				"user[school_id]": "Please enter the student's school id.",
				"user[email]": "Please enter the student's PCC email address.",
				"user[phone]": "Please enter the student's phone number.",
				"user[box]": "Please enter the student's box number."
			}
		});
	});
</script>
